name: Django CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Build Docker image
        run: docker compose build
        working-directory: ./cleanstore

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Run tests
        run: |
          docker compose run \
            -e AFRICAS_TALKING_APIKEY=${{ secrets.AFRICAS_TALKING_APIKEY }} \
            -e AFRICAS_TALKING_USERNAME=${{ secrets.AFRICAS_TALKING_USERNAME }} \
            -e GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }} \
            -e GOOGLE_SECRET=${{ secrets.GOOGLE_SECRET }} \
            web python manage.py test
        working-directory: ./cleanstore

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python and AWS credentials, and upgrade pip
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install AWS Elastic Beanstalk CLI
        run: |
          echo "AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}"
          echo "AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          echo "AWS_REGION: ${{ secrets.AWS_REGION }}"
          pip install --upgrade pip
          pip install awsebcli
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region ${{ secrets.AWS_REGION }}

      - name: Debug SSH Key
        run: ls -l ~/.ssh

      - name: Set AWS_EB_CLI_HOME
        run: echo "AWS_EB_CLI_HOME=${HOME}/.ssh" >> $GITHUB_ENV

      - name: Add SSH public key
        run: echo "${{ secrets.SSH_PUBLIC_KEY }}" > ~/.ssh/aws-eb.pub

      - name: Initialize Elastic Beanstalk CLI
        run: eb init -r ${{ secrets.AWS_REGION }} -p docker Cleanstoreobv-env

      - name: Deploy to Elastic Beanstalk
        run: eb deploy Cleanstoreobv-env --label app-240227_021624914308 --staged

      - name: Run migrations and collect static files after deployment
        run: eb ssh Cleanstoreobv-env --command "docker exec -it cleanstore_web_1 python manage.py migrate && docker exec -it cleanstore_web_1 python manage.py collectstatic --noinput"
