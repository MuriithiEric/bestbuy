name: Django CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Build Docker image
        run: docker compose build
        working-directory: ./cleanstore

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Run tests
        run: |
          docker compose run \
            -e AFRICAS_TALKING_APIKEY=${{ secrets.AFRICAS_TALKING_APIKEY }} \
            -e AFRICAS_TALKING_USERNAME=${{ secrets.AFRICAS_TALKING_USERNAME }} \
            -e GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }} \
            -e GOOGLE_SECRET=${{ secrets.GOOGLE_SECRET }} \
            web python manage.py test
        working-directory: ./cleanstore

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python and AWS credentials, and upgrade pip
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install AWS Elastic Beanstalk CLI
        run: |
          echo "AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}"
          echo "AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          echo "AWS_REGION: ${{ secrets.AWS_REGION }}"
          pip install --upgrade pip
          pip install awsebcli
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region ${{ secrets.AWS_REGION }}

          # Initialize EB CLI using existing key pair
          eb init -r ${{ secrets.AWS_REGION }} -p docker Cleanstoreobv-env --region ${{ secrets.AWS_REGION }} --keyname kimspair.pem

      - name: Deploy to AWS Elastic Beanstalk
        run: |
          echo "AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID"
          echo "AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY"
          echo "AWS_REGION: $AWS_REGION"
          pip install --upgrade pip
          # Deploy to Elastic Beanstalk
          # Generate a Dockerrun.aws.json or use an existing Docker Compose file
          # This command assumes you have prepared your application package correctly
          eb deploy Cleanstoreobv-env --label app-240227_021624914308 --staged
          # Run migrations and collect static files after deployment
          eb ssh Cleanstoreobv-env --command "docker exec -it cleanstore_web_1 python manage.py migrate && docker exec -it cleanstore_web_1 python manage.py collectstatic --noinput"
